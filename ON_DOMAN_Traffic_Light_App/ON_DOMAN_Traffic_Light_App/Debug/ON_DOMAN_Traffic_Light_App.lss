
ON_DOMAN_Traffic_Light_App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000860  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e2b  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4a  00000000  00000000  0000288f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eee  00000000  00000000  000033d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  000042c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d3  00000000  00000000  00004594  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b2d  00000000  00000000  00004f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005a94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ef 03 	call	0x7de	; 0x7de <main>
  74:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Timer_OVERFLOW>:
uint8_t RED_CAR_FLAG=0;
uint8_t YELLOW_CAR_FLAG=0;
uint8_t GREEN_CAR_FLAG=0;

void Timer_OVERFLOW(void){
	if(RED_CAR_FLAG == HIGH)
  7c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <RED_CAR_FLAG>
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	71 f5       	brne	.+92     	; 0xe0 <Timer_OVERFLOW+0x64>
	{
		//  cars red on and pedestrian green on for 5 seconds
		LED_ON(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
		LED_ON(LED_PEDSTRAIN_GREEN_PORTB, LED_PEDSTRAIN_GREEN_PIN);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	82 e4       	ldi	r24, 0x42	; 66
  90:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
		LED_blink_mode(LED_CAR_RED_PORTA,LED_CAR_RED_PIN,CAR_MODE);
  94:	41 e0       	ldi	r20, 0x01	; 1
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	81 e4       	ldi	r24, 0x41	; 65
  9a:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_blink_mode>

	    // BOTH IS OFF  
		LED_OFF(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	81 e4       	ldi	r24, 0x41	; 65
  a2:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
		LED_YELLOW_BOTH();
  a6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LED_YELLOW_BOTH>
        // GREEN IS OFF , RED IS ON . 
		LED_OFF(LED_PEDSTRAIN_GREEN_PORTB, LED_PEDSTRAIN_GREEN_PIN);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
		LED_ON(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	81 e4       	ldi	r24, 0x41	; 65
  b6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
		LED_ON(LED_PEDSTRAIN_GREEN_PORTB, LED_PEDSTRAIN_GREEN_PIN);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
		LED_blink_mode(LED_PEDSTRAIN_RED_PORTB,LED_PEDSTRAIN_RED_PIN,PEDASTRAIN_MODE);
  c2:	42 e0       	ldi	r20, 0x02	; 2
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	82 e4       	ldi	r24, 0x42	; 66
  c8:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_blink_mode>
		// 4. cars green off & both yellow led blink for 5 seconds and pedestrian red still on
		LED_OFF(LED_PEDSTRAIN_GREEN_PORTB, LED_PEDSTRAIN_GREEN_PIN);
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	82 e4       	ldi	r24, 0x42	; 66
  d0:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
		LED_NORMAL_DELAY();
  d4:	0e 94 c1 01 	call	0x382	; 0x382 <LED_NORMAL_DELAY>

		// 5. cars led on and back to normal mode & pedestrian red is still on
		LED_ON(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	81 e4       	ldi	r24, 0x41	; 65
  dc:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
	}
   if(YELLOW_CAR_FLAG == HIGH)
  e0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <YELLOW_CAR_FLAG>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	31 f5       	brne	.+76     	; 0x134 <Timer_OVERFLOW+0xb8>
	{
	     LED_YELLOW_BOTH();
  e8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LED_YELLOW_BOTH>
		LED_OFF(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	81 e4       	ldi	r24, 0x41	; 65
  f0:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
		LED_ON(LED_PEDSTRAIN_GREEN_PORTB, LED_PEDSTRAIN_GREEN_PIN);
  f4:	62 e0       	ldi	r22, 0x02	; 2
  f6:	82 e4       	ldi	r24, 0x42	; 66
  f8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
		LED_NORMAL_DELAY();
  fc:	0e 94 c1 01 	call	0x382	; 0x382 <LED_NORMAL_DELAY>
		LED_OFF(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	81 e4       	ldi	r24, 0x41	; 65
 104:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
	    LED_YELLOW_BOTH();
 108:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LED_YELLOW_BOTH>
		// 4. pedestrian green off & cars green on and pedestrian red on for 5 seconds
		LED_OFF(LED_PEDSTRAIN_GREEN_PORTB, LED_PEDSTRAIN_GREEN_PIN);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	82 e4       	ldi	r24, 0x42	; 66
 110:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
		LED_ON(LED_PEDSTRAIN_GREEN_PORTB,LED_PEDSTRAIN_GREEN_PIN);
 114:	62 e0       	ldi	r22, 0x02	; 2
 116:	82 e4       	ldi	r24, 0x42	; 66
 118:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
		LED_ON(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
	    LED_NORMAL_DELAY();
 124:	0e 94 c1 01 	call	0x382	; 0x382 <LED_NORMAL_DELAY>

		// 5. cars green off & pedestrian red still on & yellow traffic blinks and back to normal mode
		LED_OFF(LED_PEDSTRAIN_GREEN_PORTB, LED_PEDSTRAIN_GREEN_PIN);
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	82 e4       	ldi	r24, 0x42	; 66
 12c:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
		LED_NORMAL_DELAY();
 130:	0e 94 c1 01 	call	0x382	; 0x382 <LED_NORMAL_DELAY>
	}
  if(GREEN_CAR_FLAG == HIGH)
 134:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	41 f5       	brne	.+80     	; 0x18c <Timer_OVERFLOW+0x110>
	{
		LED_YELLOW_BOTH();
 13c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LED_YELLOW_BOTH>
		LED_OFF(LED_CAR_GREEN_PORTA,LED_CAR_GREEN_PIN);
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	81 e4       	ldi	r24, 0x41	; 65
 144:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
		LED_OFF(LED_PEDSTRAIN_RED_PORTB,LED_PEDSTRAIN_RED_PIN);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	82 e4       	ldi	r24, 0x42	; 66
 14c:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
		LED_ON(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	81 e4       	ldi	r24, 0x41	; 65
 154:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
		LED_ON(LED_PEDSTRAIN_GREEN_PORTB, LED_PEDSTRAIN_GREEN_PIN);
 158:	62 e0       	ldi	r22, 0x02	; 2
 15a:	82 e4       	ldi	r24, 0x42	; 66
 15c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
	    LED_NORMAL_DELAY();
 160:	0e 94 c1 01 	call	0x382	; 0x382 <LED_NORMAL_DELAY>
		LED_OFF(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	81 e4       	ldi	r24, 0x41	; 65
 168:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
		LED_YELLOW_BOTH();
 16c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LED_YELLOW_BOTH>
		// 4. pedestrian green off & cars green on and pedestrian red on for 5 seconds & back to normal mode
		LED_OFF(LED_PEDSTRAIN_GREEN_PORTB, LED_PEDSTRAIN_GREEN_PIN);
 170:	62 e0       	ldi	r22, 0x02	; 2
 172:	82 e4       	ldi	r24, 0x42	; 66
 174:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
		LED_ON(LED_PEDSTRAIN_GREEN_PORTB, LED_PEDSTRAIN_GREEN_PIN);
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	82 e4       	ldi	r24, 0x42	; 66
 17c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
		LED_ON(LED_PEDSTRAIN_RED_PORTB,LED_PEDSTRAIN_RED_PIN);
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	82 e4       	ldi	r24, 0x42	; 66
 184:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
		 LED_NORMAL_DELAY();
 188:	0e 94 c1 01 	call	0x382	; 0x382 <LED_NORMAL_DELAY>
 18c:	08 95       	ret

0000018e <APP_INIT>:
/************************************************************************/
/*  INIT FUNCTION                                                       */
/************************************************************************/
void APP_INIT(void){
         /********************  Initialization of CAR LEDS  **************************************/      
        LED_Init(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	81 e4       	ldi	r24, 0x41	; 65
 192:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LED_Init>
        LED_Init(LED_CAR_YELLOW_PORTA,LED_CAR_YELLOW_PIN);
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	81 e4       	ldi	r24, 0x41	; 65
 19a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LED_Init>
        LED_Init(LED_CAR_GREEN_PORTA,LED_CAR_GREEN_PIN);
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	81 e4       	ldi	r24, 0x41	; 65
 1a2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LED_Init>
         /********************* Initialization of pedestrians LEDS  *******************************/
        LED_Init(LED_PEDSTRAIN_RED_PORTB,LED_PEDSTRAIN_RED_PIN);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	82 e4       	ldi	r24, 0x42	; 66
 1aa:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LED_Init>
        LED_Init(LED_PEDSTRAIN_YELLOW_PORTB,LED_PEDSTRAIN_YELLOW_PIN);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	82 e4       	ldi	r24, 0x42	; 66
 1b2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LED_Init>
        LED_Init(LED_PEDSTRAIN_GREEN_PORTB,LED_PEDSTRAIN_GREEN_PIN);
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LED_Init>
         /********************* Initialization of  BUTTON INTERRPT  ******************************/
         BUTTON_INIT(BUTTON_INT_PORTD,BUTTON_INT_PIND2);
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	84 e4       	ldi	r24, 0x44	; 68
 1c2:	0e 94 65 01 	call	0x2ca	; 0x2ca <BUTTON_INIT>
        // SEI FUNCTION initialization 
         //  sei();
         /**************************** Timer 0 **********************/
	      TIMER0_MODE_INIT(MODE_NORMAL,1000); // Select Mode of timer0.
 1c6:	68 ee       	ldi	r22, 0xE8	; 232
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <TIMER0_MODE_INIT>
	      TIMERO_PRESCALER_INIT(NO_PRESCALER);
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 a3 03 	call	0x746	; 0x746 <TIMERO_PRESCALER_INIT>
	      TIMER0_OV_Interrupt_Enable();
 1d4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <TIMER0_OV_Interrupt_Enable>
	      TIMER0_OV_SETCALLBACK(Timer_OVERFLOW);
 1d8:	8e e3       	ldi	r24, 0x3E	; 62
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 ed 03 	call	0x7da	; 0x7da <TIMER0_OV_SETCALLBACK>
	    /******************external interrupt INT0*******************/
	      EXternal_INT0_Enable();
 1e0:	0e 94 27 03 	call	0x64e	; 0x64e <EXternal_INT0_Enable>
	      EXternal_INT0_Trigger_Edge(FALLING_EDGE);
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	0e 94 2c 03 	call	0x658	; 0x658 <EXternal_INT0_Trigger_Edge>
		  BUTTON_interrupt();
 1ea:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <BUTTON_interrupt>
 1ee:	08 95       	ret

000001f0 <APP_START>:
}
void APP_START(void){
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
	LED_ON(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	81 e4       	ldi	r24, 0x41	; 65
 1f8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
	LED_OFF(LED_CAR_GREEN_PORTA, LED_CAR_GREEN_PIN);
 1fc:	62 e0       	ldi	r22, 0x02	; 2
 1fe:	81 e4       	ldi	r24, 0x41	; 65
 200:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	81 e1       	ldi	r24, 0x11	; 17
 208:	9a e7       	ldi	r25, 0x7A	; 122
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <APP_START+0x1a>
 212:	00 c0       	rjmp	.+0      	; 0x214 <APP_START+0x24>
 214:	00 00       	nop
	_delay_ms(5000);
	for (int i=0;i<5;i++)
 216:	c0 e0       	ldi	r28, 0x00	; 0
 218:	d0 e0       	ldi	r29, 0x00	; 0
 21a:	1b c0       	rjmp	.+54     	; 0x252 <APP_START+0x62>
	{
		LED_ON(LED_CAR_YELLOW_PORTA, LED_CAR_YELLOW_PIN);
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	81 e4       	ldi	r24, 0x41	; 65
 220:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	84 e3       	ldi	r24, 0x34	; 52
 228:	9c e0       	ldi	r25, 0x0C	; 12
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <APP_START+0x3a>
 232:	00 c0       	rjmp	.+0      	; 0x234 <APP_START+0x44>
 234:	00 00       	nop
		_delay_ms(500);
		LED_OFF(LED_CAR_YELLOW_PORTA, LED_CAR_YELLOW_PIN);
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	81 e4       	ldi	r24, 0x41	; 65
 23a:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
 23e:	2f ef       	ldi	r18, 0xFF	; 255
 240:	84 e3       	ldi	r24, 0x34	; 52
 242:	9c e0       	ldi	r25, 0x0C	; 12
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <APP_START+0x54>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <APP_START+0x5e>
 24e:	00 00       	nop
}
void APP_START(void){
	LED_ON(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
	LED_OFF(LED_CAR_GREEN_PORTA, LED_CAR_GREEN_PIN);
	_delay_ms(5000);
	for (int i=0;i<5;i++)
 250:	21 96       	adiw	r28, 0x01	; 1
 252:	c5 30       	cpi	r28, 0x05	; 5
 254:	d1 05       	cpc	r29, r1
 256:	14 f3       	brlt	.-60     	; 0x21c <APP_START+0x2c>
		LED_ON(LED_CAR_YELLOW_PORTA, LED_CAR_YELLOW_PIN);
		_delay_ms(500);
		LED_OFF(LED_CAR_YELLOW_PORTA, LED_CAR_YELLOW_PIN);
		_delay_ms(500);
	}
	LED_OFF(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	81 e4       	ldi	r24, 0x41	; 65
 25c:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
	LED_ON(LED_CAR_GREEN_PORTA, LED_CAR_GREEN_PIN);
 260:	62 e0       	ldi	r22, 0x02	; 2
 262:	81 e4       	ldi	r24, 0x41	; 65
 264:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
	LED_OFF(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	81 e4       	ldi	r24, 0x41	; 65
 26c:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
 270:	2f ef       	ldi	r18, 0xFF	; 255
 272:	81 e1       	ldi	r24, 0x11	; 17
 274:	9a e7       	ldi	r25, 0x7A	; 122
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <APP_START+0x86>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <APP_START+0x90>
 280:	00 00       	nop
	_delay_ms(5000);
	for (int i=0;i<5;i++)
 282:	c0 e0       	ldi	r28, 0x00	; 0
 284:	d0 e0       	ldi	r29, 0x00	; 0
 286:	1b c0       	rjmp	.+54     	; 0x2be <APP_START+0xce>
	{
		LED_ON(LED_CAR_YELLOW_PORTA, LED_CAR_YELLOW_PIN);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	81 e4       	ldi	r24, 0x41	; 65
 28c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LED_ON>
 290:	2f ef       	ldi	r18, 0xFF	; 255
 292:	84 e3       	ldi	r24, 0x34	; 52
 294:	9c e0       	ldi	r25, 0x0C	; 12
 296:	21 50       	subi	r18, 0x01	; 1
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	e1 f7       	brne	.-8      	; 0x296 <APP_START+0xa6>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <APP_START+0xb0>
 2a0:	00 00       	nop
		_delay_ms(500);
		LED_OFF(LED_CAR_YELLOW_PORTA, LED_CAR_YELLOW_PIN);
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	81 e4       	ldi	r24, 0x41	; 65
 2a6:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
 2aa:	2f ef       	ldi	r18, 0xFF	; 255
 2ac:	84 e3       	ldi	r24, 0x34	; 52
 2ae:	9c e0       	ldi	r25, 0x0C	; 12
 2b0:	21 50       	subi	r18, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <APP_START+0xc0>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <APP_START+0xca>
 2ba:	00 00       	nop
	}
	LED_OFF(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
	LED_ON(LED_CAR_GREEN_PORTA, LED_CAR_GREEN_PIN);
	LED_OFF(LED_CAR_RED_PORTA,LED_CAR_RED_PIN);
	_delay_ms(5000);
	for (int i=0;i<5;i++)
 2bc:	21 96       	adiw	r28, 0x01	; 1
 2be:	c5 30       	cpi	r28, 0x05	; 5
 2c0:	d1 05       	cpc	r29, r1
 2c2:	14 f3       	brlt	.-60     	; 0x288 <APP_START+0x98>
		_delay_ms(500);
		LED_OFF(LED_CAR_YELLOW_PORTA, LED_CAR_YELLOW_PIN);
		_delay_ms(500);
	}
  
	}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <BUTTON_INIT>:
 if (1)
 {
	button_read_error=BUTTON_OK;
 }
return  button_read_error;
}
 2ca:	46 2f       	mov	r20, r22
 2cc:	68 2f       	mov	r22, r24
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_Init>
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret

000002d8 <BUTTON_interrupt>:
BUTTON_Error_t BUTTON_interrupt()
{
		EXternal_INT0_Trigger_Edge(FALLING_EDGE);
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	0e 94 2c 03 	call	0x658	; 0x658 <EXternal_INT0_Trigger_Edge>
		BUTTON_INIT(BUTTON_INT_PORTD, BUTTON_INT_PIND2);
 2de:	62 e0       	ldi	r22, 0x02	; 2
 2e0:	84 e4       	ldi	r24, 0x44	; 68
 2e2:	0e 94 65 01 	call	0x2ca	; 0x2ca <BUTTON_INIT>
}
 2e6:	08 95       	ret

000002e8 <LED_Init>:
 *
 * Created: 2/18/2023 7:16:04 PM
 *  Author: shehab mohamed shawki 
 */ 
#include "LED.h"
LED_Error LED_Init(uint8_t port_led,DIO_Pin_number pin_led){
 2e8:	46 2f       	mov	r20, r22
LED_Error led_init_error=LED_OK;
DIO_Init(OUTPUT,port_led,pin_led);
 2ea:	68 2f       	mov	r22, r24
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_Init>
if (1)
{
	led_init_error=LED_OK;
}
return led_init_error;
}
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret

000002f6 <LED_ON>:
LED_Error LED_ON(uint8_t port_led,DIO_Pin_number pin_led){
 2f6:	46 2f       	mov	r20, r22
	LED_Error led_on_error=LED_OK;
	DIO_Write(HIGH,port_led,pin_led);
 2f8:	68 2f       	mov	r22, r24
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 74 02 	call	0x4e8	; 0x4e8 <DIO_Write>
	if (1)
	{
		led_on_error=LED_OK;
	}
 return  led_on_error;
}
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret

00000304 <LED_OFF>:
LED_Error LED_OFF(uint8_t port_led,uint8_t pin_led){
 304:	46 2f       	mov	r20, r22
	LED_Error led_off_error=LED_OK;
	DIO_Write(LOW,port_led,pin_led);
 306:	68 2f       	mov	r22, r24
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <DIO_Write>
   if (1)
   {
	  led_off_error=LED_OK;
   }
return  led_off_error;
}
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	08 95       	ret

00000312 <LED_TOGGLE>:
LED_Error LED_TOGGLE(uint8_t port_led,uint8_t pin_led){
	
	LED_Error led_toggle_error=LED_OK;
DIO_TOGGLE(port_led,pin_led);
 312:	0e 94 ef 02 	call	0x5de	; 0x5de <DIO_TOGGLE>
if (1)
{
	led_toggle_error=LED_OK;
}
return led_toggle_error;
}
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	08 95       	ret

0000031a <LED_blink_mode>:
LED_Error LED_blink_mode(uint8_t port_led, uint8_t pin_led,uint8_t mode){
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
	LED_Error led_blink_error=LED_OK;
	switch(mode){
 31e:	41 30       	cpi	r20, 0x01	; 1
 320:	91 f0       	breq	.+36     	; 0x346 <LED_blink_mode+0x2c>
 322:	42 30       	cpi	r20, 0x02	; 2
 324:	29 f1       	breq	.+74     	; 0x370 <LED_blink_mode+0x56>
 326:	29 c0       	rjmp	.+82     	; 0x37a <LED_blink_mode+0x60>
		case CAR_MODE:
		// blink yellow led of pedestrian led
		for (int i=0;i<10;i++)
		{
			LED_TOGGLE(LED_CAR_YELLOW_PORTA,LED_CAR_YELLOW_PIN);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	81 e4       	ldi	r24, 0x41	; 65
 32c:	0e 94 89 01 	call	0x312	; 0x312 <LED_TOGGLE>
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	80 e7       	ldi	r24, 0x70	; 112
 334:	92 e0       	ldi	r25, 0x02	; 2
 336:	21 50       	subi	r18, 0x01	; 1
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	90 40       	sbci	r25, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <LED_blink_mode+0x1c>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <LED_blink_mode+0x26>
 340:	00 00       	nop
LED_Error LED_blink_mode(uint8_t port_led, uint8_t pin_led,uint8_t mode){
	LED_Error led_blink_error=LED_OK;
	switch(mode){
		case CAR_MODE:
		// blink yellow led of pedestrian led
		for (int i=0;i<10;i++)
 342:	21 96       	adiw	r28, 0x01	; 1
 344:	02 c0       	rjmp	.+4      	; 0x34a <LED_blink_mode+0x30>
}
return led_toggle_error;
}
LED_Error LED_blink_mode(uint8_t port_led, uint8_t pin_led,uint8_t mode){
	LED_Error led_blink_error=LED_OK;
	switch(mode){
 346:	c0 e0       	ldi	r28, 0x00	; 0
 348:	d0 e0       	ldi	r29, 0x00	; 0
		case CAR_MODE:
		// blink yellow led of pedestrian led
		for (int i=0;i<10;i++)
 34a:	ca 30       	cpi	r28, 0x0A	; 10
 34c:	d1 05       	cpc	r29, r1
 34e:	64 f3       	brlt	.-40     	; 0x328 <LED_blink_mode+0xe>
 350:	14 c0       	rjmp	.+40     	; 0x37a <LED_blink_mode+0x60>
		break;
		case PEDASTRAIN_MODE:
		// blink yellow led of pedestrian led
		for (int i=0;i<10;i++)
		{
			LED_TOGGLE(LED_PEDSTRAIN_YELLOW_PORTB,LED_PEDSTRAIN_YELLOW_PIN);
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	82 e4       	ldi	r24, 0x42	; 66
 356:	0e 94 89 01 	call	0x312	; 0x312 <LED_TOGGLE>
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	80 e7       	ldi	r24, 0x70	; 112
 35e:	92 e0       	ldi	r25, 0x02	; 2
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <LED_blink_mode+0x46>
 368:	00 c0       	rjmp	.+0      	; 0x36a <LED_blink_mode+0x50>
 36a:	00 00       	nop
			led_blink_error=LED_OK;
		}
		break;
		case PEDASTRAIN_MODE:
		// blink yellow led of pedestrian led
		for (int i=0;i<10;i++)
 36c:	21 96       	adiw	r28, 0x01	; 1
 36e:	02 c0       	rjmp	.+4      	; 0x374 <LED_blink_mode+0x5a>
}
return led_toggle_error;
}
LED_Error LED_blink_mode(uint8_t port_led, uint8_t pin_led,uint8_t mode){
	LED_Error led_blink_error=LED_OK;
	switch(mode){
 370:	c0 e0       	ldi	r28, 0x00	; 0
 372:	d0 e0       	ldi	r29, 0x00	; 0
			led_blink_error=LED_OK;
		}
		break;
		case PEDASTRAIN_MODE:
		// blink yellow led of pedestrian led
		for (int i=0;i<10;i++)
 374:	ca 30       	cpi	r28, 0x0A	; 10
 376:	d1 05       	cpc	r29, r1
 378:	64 f3       	brlt	.-40     	; 0x352 <LED_blink_mode+0x38>
			led_blink_error=LED_OK;
		}
		break;
	}
	return LED_OK;
}
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <LED_NORMAL_DELAY>:
LED_Error LED_NORMAL_DELAY(void)
{ 
	LED_Error led_normal_error=LED_OK;
	TIMER0_MODE_INIT(MODE_NORMAL,4000);
 382:	60 ea       	ldi	r22, 0xA0	; 160
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <TIMER0_MODE_INIT>
	TIMERO_PRESCALER_INIT(PRESCALER_1024);
 38a:	84 e0       	ldi	r24, 0x04	; 4
 38c:	0e 94 a3 03 	call	0x746	; 0x746 <TIMERO_PRESCALER_INIT>
	TIMER0_OV_Interrupt_Enable();
 390:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <TIMER0_OV_Interrupt_Enable>
	while(DELAY_FLAG != HIGH);
 394:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <DELAY_FLAG>
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	e1 f7       	brne	.-8      	; 0x394 <LED_NORMAL_DELAY+0x12>
	DELAY_FLAG = LOW;
 39c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <DELAY_FLAG>
	TIMER0_STOP();
 3a0:	0e 94 a0 03 	call	0x740	; 0x740 <TIMER0_STOP>
	if (1)
	{
		led_normal_error=LED_OK;
	}
	return led_normal_error;
}
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	08 95       	ret

000003a8 <LED_YELLOW_BOTH>:
LED_Error LED_YELLOW_BOTH(void)
{
  LED_Error led_yellow_error=LED_OK;
TIMER0_MODE_INIT(MODE_NORMAL,4000);
 3a8:	60 ea       	ldi	r22, 0xA0	; 160
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <TIMER0_MODE_INIT>
TIMERO_PRESCALER_INIT(PRESCALER_1024);
 3b0:	84 e0       	ldi	r24, 0x04	; 4
 3b2:	0e 94 a3 03 	call	0x746	; 0x746 <TIMERO_PRESCALER_INIT>
TIMER0_OV_Interrupt_Enable();
 3b6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <TIMER0_OV_Interrupt_Enable>
	while ((TIFR & (1<<TOV0)) == 0)
 3ba:	0a c0       	rjmp	.+20     	; 0x3d0 <LED_YELLOW_BOTH+0x28>
	{
		LED_blink_mode(LED_CAR_YELLOW_PORTA,LED_CAR_YELLOW_PIN,CAR_MODE);
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	81 e4       	ldi	r24, 0x41	; 65
 3c2:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_blink_mode>
		LED_blink_mode(LED_PEDSTRAIN_YELLOW_PORTB,LED_PEDSTRAIN_YELLOW_PIN,PEDASTRAIN_MODE);
 3c6:	42 e0       	ldi	r20, 0x02	; 2
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	82 e4       	ldi	r24, 0x42	; 66
 3cc:	0e 94 8d 01 	call	0x31a	; 0x31a <LED_blink_mode>
{
  LED_Error led_yellow_error=LED_OK;
TIMER0_MODE_INIT(MODE_NORMAL,4000);
TIMERO_PRESCALER_INIT(PRESCALER_1024);
TIMER0_OV_Interrupt_Enable();
	while ((TIFR & (1<<TOV0)) == 0)
 3d0:	08 b6       	in	r0, 0x38	; 56
 3d2:	00 fe       	sbrs	r0, 0
 3d4:	f3 cf       	rjmp	.-26     	; 0x3bc <LED_YELLOW_BOTH+0x14>
	{
		LED_blink_mode(LED_CAR_YELLOW_PORTA,LED_CAR_YELLOW_PIN,CAR_MODE);
		LED_blink_mode(LED_PEDSTRAIN_YELLOW_PORTB,LED_PEDSTRAIN_YELLOW_PIN,PEDASTRAIN_MODE);
	}
    TIMER0_STOP();
 3d6:	0e 94 a0 03 	call	0x740	; 0x740 <TIMER0_STOP>
	TIMER0_Clear_ovf_Flag();
 3da:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <TIMER0_Clear_ovf_Flag>
	LED_OFF(LED_CAR_YELLOW_PORTA,LED_CAR_YELLOW_PIN);
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	81 e4       	ldi	r24, 0x41	; 65
 3e2:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
	LED_OFF(LED_PEDSTRAIN_YELLOW_PORTB,LED_PEDSTRAIN_YELLOW_PIN);
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	82 e4       	ldi	r24, 0x42	; 66
 3ea:	0e 94 82 01 	call	0x304	; 0x304 <LED_OFF>
 if (1)
 {
	 led_yellow_error=LED_OK;
 }
 return led_yellow_error=LED_OK;
}
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	08 95       	ret

000003f2 <DIO_Init>:
			DIO_read_Error = DIO_OK;
		}
		break;
		}
       return DIO_read_Error;
}
 3f2:	62 34       	cpi	r22, 0x42	; 66
 3f4:	31 f1       	breq	.+76     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 3f6:	18 f4       	brcc	.+6      	; 0x3fe <DIO_Init+0xc>
 3f8:	61 34       	cpi	r22, 0x41	; 65
 3fa:	39 f0       	breq	.+14     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3fc:	73 c0       	rjmp	.+230    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 3fe:	63 34       	cpi	r22, 0x43	; 67
 400:	e1 f1       	breq	.+120    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 402:	64 34       	cpi	r22, 0x44	; 68
 404:	09 f4       	brne	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	54 c0       	rjmp	.+168    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 408:	6d c0       	rjmp	.+218    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 40a:	81 11       	cpse	r24, r1
 40c:	0c c0       	rjmp	.+24     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 40e:	2a b3       	in	r18, 0x1a	; 26
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	4a 95       	dec	r20
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	80 95       	com	r24
 420:	82 23       	and	r24, r18
 422:	8a bb       	out	0x1a, r24	; 26
 424:	5f c0       	rjmp	.+190    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	09 f0       	breq	.+2      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42a:	5c c0       	rjmp	.+184    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 42c:	2a b3       	in	r18, 0x1a	; 26
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	4a 95       	dec	r20
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	82 2b       	or	r24, r18
 43e:	8a bb       	out	0x1a, r24	; 26
 440:	51 c0       	rjmp	.+162    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 442:	81 11       	cpse	r24, r1
 444:	0c c0       	rjmp	.+24     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 446:	27 b3       	in	r18, 0x17	; 23
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	4a 95       	dec	r20
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	80 95       	com	r24
 458:	82 23       	and	r24, r18
 45a:	87 bb       	out	0x17, r24	; 23
 45c:	43 c0       	rjmp	.+134    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	09 f0       	breq	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 462:	40 c0       	rjmp	.+128    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 464:	27 b3       	in	r18, 0x17	; 23
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	4a 95       	dec	r20
 472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	82 2b       	or	r24, r18
 476:	87 bb       	out	0x17, r24	; 23
 478:	35 c0       	rjmp	.+106    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 47a:	81 11       	cpse	r24, r1
 47c:	0c c0       	rjmp	.+24     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 47e:	24 b3       	in	r18, 0x14	; 20
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	4a 95       	dec	r20
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	80 95       	com	r24
 490:	82 23       	and	r24, r18
 492:	84 bb       	out	0x14, r24	; 20
 494:	27 c0       	rjmp	.+78     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	29 f5       	brne	.+74     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 49a:	24 b3       	in	r18, 0x14	; 20
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	4a 95       	dec	r20
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4aa:	82 2b       	or	r24, r18
 4ac:	84 bb       	out	0x14, r24	; 20
 4ae:	1a c0       	rjmp	.+52     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4b0:	81 11       	cpse	r24, r1
 4b2:	0c c0       	rjmp	.+24     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4b4:	21 b3       	in	r18, 0x11	; 17
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	4a 95       	dec	r20
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4c4:	80 95       	com	r24
 4c6:	82 23       	and	r24, r18
 4c8:	81 bb       	out	0x11, r24	; 17
 4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	51 f4       	brne	.+20     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4d0:	21 b3       	in	r18, 0x11	; 17
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	4a 95       	dec	r20
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4e0:	82 2b       	or	r24, r18
 4e2:	81 bb       	out	0x11, r24	; 17
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	08 95       	ret

000004e8 <DIO_Write>:
 4e8:	62 34       	cpi	r22, 0x42	; 66
 4ea:	31 f1       	breq	.+76     	; 0x538 <DIO_Write+0x50>
 4ec:	18 f4       	brcc	.+6      	; 0x4f4 <DIO_Write+0xc>
 4ee:	61 34       	cpi	r22, 0x41	; 65
 4f0:	39 f0       	breq	.+14     	; 0x500 <DIO_Write+0x18>
 4f2:	73 c0       	rjmp	.+230    	; 0x5da <DIO_Write+0xf2>
 4f4:	63 34       	cpi	r22, 0x43	; 67
 4f6:	e1 f1       	breq	.+120    	; 0x570 <DIO_Write+0x88>
 4f8:	64 34       	cpi	r22, 0x44	; 68
 4fa:	09 f4       	brne	.+2      	; 0x4fe <DIO_Write+0x16>
 4fc:	54 c0       	rjmp	.+168    	; 0x5a6 <DIO_Write+0xbe>
 4fe:	6d c0       	rjmp	.+218    	; 0x5da <DIO_Write+0xf2>
 500:	81 11       	cpse	r24, r1
 502:	0c c0       	rjmp	.+24     	; 0x51c <DIO_Write+0x34>
 504:	2b b3       	in	r18, 0x1b	; 27
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_Write+0x28>
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	4a 95       	dec	r20
 512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_Write+0x24>
 514:	80 95       	com	r24
 516:	82 23       	and	r24, r18
 518:	8b bb       	out	0x1b, r24	; 27
 51a:	5f c0       	rjmp	.+190    	; 0x5da <DIO_Write+0xf2>
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	09 f0       	breq	.+2      	; 0x522 <DIO_Write+0x3a>
 520:	5c c0       	rjmp	.+184    	; 0x5da <DIO_Write+0xf2>
 522:	2b b3       	in	r18, 0x1b	; 27
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_Write+0x46>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	4a 95       	dec	r20
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_Write+0x42>
 532:	82 2b       	or	r24, r18
 534:	8b bb       	out	0x1b, r24	; 27
 536:	51 c0       	rjmp	.+162    	; 0x5da <DIO_Write+0xf2>
 538:	81 11       	cpse	r24, r1
 53a:	0c c0       	rjmp	.+24     	; 0x554 <DIO_Write+0x6c>
 53c:	28 b3       	in	r18, 0x18	; 24
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_Write+0x60>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	4a 95       	dec	r20
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_Write+0x5c>
 54c:	80 95       	com	r24
 54e:	82 23       	and	r24, r18
 550:	88 bb       	out	0x18, r24	; 24
 552:	43 c0       	rjmp	.+134    	; 0x5da <DIO_Write+0xf2>
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	09 f0       	breq	.+2      	; 0x55a <DIO_Write+0x72>
 558:	40 c0       	rjmp	.+128    	; 0x5da <DIO_Write+0xf2>
 55a:	28 b3       	in	r18, 0x18	; 24
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_Write+0x7e>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	4a 95       	dec	r20
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_Write+0x7a>
 56a:	82 2b       	or	r24, r18
 56c:	88 bb       	out	0x18, r24	; 24
 56e:	35 c0       	rjmp	.+106    	; 0x5da <DIO_Write+0xf2>
 570:	81 11       	cpse	r24, r1
 572:	0c c0       	rjmp	.+24     	; 0x58c <DIO_Write+0xa4>
 574:	25 b3       	in	r18, 0x15	; 21
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_Write+0x98>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	4a 95       	dec	r20
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_Write+0x94>
 584:	80 95       	com	r24
 586:	82 23       	and	r24, r18
 588:	85 bb       	out	0x15, r24	; 21
 58a:	27 c0       	rjmp	.+78     	; 0x5da <DIO_Write+0xf2>
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	29 f5       	brne	.+74     	; 0x5da <DIO_Write+0xf2>
 590:	25 b3       	in	r18, 0x15	; 21
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_Write+0xb4>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	4a 95       	dec	r20
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_Write+0xb0>
 5a0:	82 2b       	or	r24, r18
 5a2:	85 bb       	out	0x15, r24	; 21
 5a4:	1a c0       	rjmp	.+52     	; 0x5da <DIO_Write+0xf2>
 5a6:	81 11       	cpse	r24, r1
 5a8:	0c c0       	rjmp	.+24     	; 0x5c2 <DIO_Write+0xda>
 5aa:	22 b3       	in	r18, 0x12	; 18
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_Write+0xce>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	4a 95       	dec	r20
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_Write+0xca>
 5ba:	80 95       	com	r24
 5bc:	82 23       	and	r24, r18
 5be:	82 bb       	out	0x12, r24	; 18
 5c0:	0c c0       	rjmp	.+24     	; 0x5da <DIO_Write+0xf2>
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	51 f4       	brne	.+20     	; 0x5da <DIO_Write+0xf2>
 5c6:	22 b3       	in	r18, 0x12	; 18
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <DIO_Write+0xea>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	4a 95       	dec	r20
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <DIO_Write+0xe6>
 5d6:	82 2b       	or	r24, r18
 5d8:	82 bb       	out	0x12, r24	; 18
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	08 95       	ret

000005de <DIO_TOGGLE>:
DIO_Error_t DIO_TOGGLE(uint8_t portNumber , DIO_Pin_number PinNumber){
	DIO_Error_t DIO_toggle_Error = DIO_OK;
	switch (portNumber){
 5de:	82 34       	cpi	r24, 0x42	; 66
 5e0:	a1 f0       	breq	.+40     	; 0x60a <DIO_TOGGLE+0x2c>
 5e2:	18 f4       	brcc	.+6      	; 0x5ea <DIO_TOGGLE+0xc>
 5e4:	81 34       	cpi	r24, 0x41	; 65
 5e6:	31 f0       	breq	.+12     	; 0x5f4 <DIO_TOGGLE+0x16>
 5e8:	30 c0       	rjmp	.+96     	; 0x64a <DIO_TOGGLE+0x6c>
 5ea:	83 34       	cpi	r24, 0x43	; 67
 5ec:	c9 f0       	breq	.+50     	; 0x620 <DIO_TOGGLE+0x42>
 5ee:	84 34       	cpi	r24, 0x44	; 68
 5f0:	11 f1       	breq	.+68     	; 0x636 <DIO_TOGGLE+0x58>
 5f2:	2b c0       	rjmp	.+86     	; 0x64a <DIO_TOGGLE+0x6c>
		case PORT_A:
		  TOGGLE(PORTA,PinNumber);  
 5f4:	2b b3       	in	r18, 0x1b	; 27
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_TOGGLE+0x22>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	6a 95       	dec	r22
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_TOGGLE+0x1e>
 604:	82 27       	eor	r24, r18
 606:	8b bb       	out	0x1b, r24	; 27
 608:	20 c0       	rjmp	.+64     	; 0x64a <DIO_TOGGLE+0x6c>
		{
			DIO_toggle_Error = DIO_OK;
		}
		break;
		case PORT_B:
		  TOGGLE(PORTB,PinNumber);  
 60a:	28 b3       	in	r18, 0x18	; 24
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_TOGGLE+0x38>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	6a 95       	dec	r22
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_TOGGLE+0x34>
 61a:	82 27       	eor	r24, r18
 61c:	88 bb       	out	0x18, r24	; 24
 61e:	15 c0       	rjmp	.+42     	; 0x64a <DIO_TOGGLE+0x6c>
		{
			DIO_toggle_Error = DIO_OK;
		}  
		break;
		case PORT_C:
		  TOGGLE(PORTC,PinNumber);  
 620:	25 b3       	in	r18, 0x15	; 21
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_TOGGLE+0x4e>
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	6a 95       	dec	r22
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_TOGGLE+0x4a>
 630:	82 27       	eor	r24, r18
 632:	85 bb       	out	0x15, r24	; 21
 634:	0a c0       	rjmp	.+20     	; 0x64a <DIO_TOGGLE+0x6c>
		{
			DIO_toggle_Error = DIO_OK;
		}
		break;
		case PORT_D:
		  TOGGLE(PORTD,PinNumber);  
 636:	22 b3       	in	r18, 0x12	; 18
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	02 c0       	rjmp	.+4      	; 0x642 <DIO_TOGGLE+0x64>
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	6a 95       	dec	r22
 644:	e2 f7       	brpl	.-8      	; 0x63e <DIO_TOGGLE+0x60>
 646:	82 27       	eor	r24, r18
 648:	82 bb       	out	0x12, r24	; 18
			DIO_toggle_Error = DIO_OK;
		}
		break;
	}
	return DIO_toggle_Error;
}
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	08 95       	ret

0000064e <EXternal_INT0_Enable>:
	if (TRUE)
	{
		EXternal_INT0_call_error = INTER_OK;
	}
	return EXternal_INT0_call_error;
}
 64e:	8b b7       	in	r24, 0x3b	; 59
 650:	80 64       	ori	r24, 0x40	; 64
 652:	8b bf       	out	0x3b, r24	; 59
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	08 95       	ret

00000658 <EXternal_INT0_Trigger_Edge>:
 658:	81 30       	cpi	r24, 0x01	; 1
 65a:	69 f0       	breq	.+26     	; 0x676 <EXternal_INT0_Trigger_Edge+0x1e>
 65c:	28 f0       	brcs	.+10     	; 0x668 <EXternal_INT0_Trigger_Edge+0x10>
 65e:	82 30       	cpi	r24, 0x02	; 2
 660:	89 f0       	breq	.+34     	; 0x684 <EXternal_INT0_Trigger_Edge+0x2c>
 662:	83 30       	cpi	r24, 0x03	; 3
 664:	b1 f0       	breq	.+44     	; 0x692 <EXternal_INT0_Trigger_Edge+0x3a>
 666:	1b c0       	rjmp	.+54     	; 0x69e <EXternal_INT0_Trigger_Edge+0x46>
 668:	85 b7       	in	r24, 0x35	; 53
 66a:	8e 7f       	andi	r24, 0xFE	; 254
 66c:	85 bf       	out	0x35, r24	; 53
 66e:	85 b7       	in	r24, 0x35	; 53
 670:	8d 7f       	andi	r24, 0xFD	; 253
 672:	85 bf       	out	0x35, r24	; 53
 674:	14 c0       	rjmp	.+40     	; 0x69e <EXternal_INT0_Trigger_Edge+0x46>
 676:	85 b7       	in	r24, 0x35	; 53
 678:	81 60       	ori	r24, 0x01	; 1
 67a:	85 bf       	out	0x35, r24	; 53
 67c:	85 b7       	in	r24, 0x35	; 53
 67e:	8d 7f       	andi	r24, 0xFD	; 253
 680:	85 bf       	out	0x35, r24	; 53
 682:	0d c0       	rjmp	.+26     	; 0x69e <EXternal_INT0_Trigger_Edge+0x46>
 684:	85 b7       	in	r24, 0x35	; 53
 686:	8e 7f       	andi	r24, 0xFE	; 254
 688:	85 bf       	out	0x35, r24	; 53
 68a:	85 b7       	in	r24, 0x35	; 53
 68c:	82 60       	ori	r24, 0x02	; 2
 68e:	85 bf       	out	0x35, r24	; 53
 690:	06 c0       	rjmp	.+12     	; 0x69e <EXternal_INT0_Trigger_Edge+0x46>
 692:	85 b7       	in	r24, 0x35	; 53
 694:	81 60       	ori	r24, 0x01	; 1
 696:	85 bf       	out	0x35, r24	; 53
 698:	85 b7       	in	r24, 0x35	; 53
 69a:	82 60       	ori	r24, 0x02	; 2
 69c:	85 bf       	out	0x35, r24	; 53
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	08 95       	ret

000006a2 <__vector_1>:
/************************************************************************/
/*  ISR for interrupt function                                          */
/************************************************************************/
ISR(INT0_vect)
{
 6a2:	1f 92       	push	r1
 6a4:	0f 92       	push	r0
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	0f 92       	push	r0
 6aa:	11 24       	eor	r1, r1
 6ac:	2f 93       	push	r18
 6ae:	3f 93       	push	r19
 6b0:	4f 93       	push	r20
 6b2:	5f 93       	push	r21
 6b4:	6f 93       	push	r22
 6b6:	7f 93       	push	r23
 6b8:	8f 93       	push	r24
 6ba:	9f 93       	push	r25
 6bc:	af 93       	push	r26
 6be:	bf 93       	push	r27
 6c0:	ef 93       	push	r30
 6c2:	ff 93       	push	r31
	if(NULL_PTR!=INT0_FLAG_PTR)
 6c4:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <INT0_FLAG_PTR>
 6c8:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <INT0_FLAG_PTR+0x1>
 6cc:	30 97       	sbiw	r30, 0x00	; 0
 6ce:	09 f0       	breq	.+2      	; 0x6d2 <__vector_1+0x30>
	{
		INT0_FLAG_PTR();
 6d0:	09 95       	icall
	}
}
 6d2:	ff 91       	pop	r31
 6d4:	ef 91       	pop	r30
 6d6:	bf 91       	pop	r27
 6d8:	af 91       	pop	r26
 6da:	9f 91       	pop	r25
 6dc:	8f 91       	pop	r24
 6de:	7f 91       	pop	r23
 6e0:	6f 91       	pop	r22
 6e2:	5f 91       	pop	r21
 6e4:	4f 91       	pop	r20
 6e6:	3f 91       	pop	r19
 6e8:	2f 91       	pop	r18
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0f 90       	pop	r0
 6f0:	1f 90       	pop	r1
 6f2:	18 95       	reti

000006f4 <TIMER0_MODE_INIT>:
/* FUNCTION Of Timer                                                    */
/************************************************************************/
TIMER_Error_t TIMER0_MODE_INIT(Timer_Mode MODE,uint8_t ini_value)  //SET MODE OF TIMER0
{
	TIMER_Error_t timer_ini_error=TIMER_OK;
	switch(MODE)
 6f4:	81 30       	cpi	r24, 0x01	; 1
 6f6:	69 f0       	breq	.+26     	; 0x712 <TIMER0_MODE_INIT+0x1e>
 6f8:	28 f0       	brcs	.+10     	; 0x704 <TIMER0_MODE_INIT+0x10>
 6fa:	82 30       	cpi	r24, 0x02	; 2
 6fc:	89 f0       	breq	.+34     	; 0x720 <TIMER0_MODE_INIT+0x2c>
 6fe:	83 30       	cpi	r24, 0x03	; 3
 700:	b1 f0       	breq	.+44     	; 0x72e <TIMER0_MODE_INIT+0x3a>
 702:	1b c0       	rjmp	.+54     	; 0x73a <TIMER0_MODE_INIT+0x46>
	{
		case MODE_NORMAL:
		CLEAR(TCCR0,WGM00);
 704:	83 b7       	in	r24, 0x33	; 51
 706:	8f 7b       	andi	r24, 0xBF	; 191
 708:	83 bf       	out	0x33, r24	; 51
		CLEAR(TCCR0,WGM01);
 70a:	83 b7       	in	r24, 0x33	; 51
 70c:	87 7f       	andi	r24, 0xF7	; 247
 70e:	83 bf       	out	0x33, r24	; 51
 710:	14 c0       	rjmp	.+40     	; 0x73a <TIMER0_MODE_INIT+0x46>
		{
		  timer_ini_error=TIMER_OK;
		}
		break;
		case MODE_PHASE_CORRECT:
		SET(TCCR0,WGM00);
 712:	83 b7       	in	r24, 0x33	; 51
 714:	80 64       	ori	r24, 0x40	; 64
 716:	83 bf       	out	0x33, r24	; 51
		CLEAR(TCCR0,WGM01);
 718:	83 b7       	in	r24, 0x33	; 51
 71a:	87 7f       	andi	r24, 0xF7	; 247
 71c:	83 bf       	out	0x33, r24	; 51
 71e:	0d c0       	rjmp	.+26     	; 0x73a <TIMER0_MODE_INIT+0x46>
		{
			timer_ini_error=TIMER_OK;
		}
		break;
		case MODE_CTC:
		CLEAR(TCCR0,WGM00);
 720:	83 b7       	in	r24, 0x33	; 51
 722:	8f 7b       	andi	r24, 0xBF	; 191
 724:	83 bf       	out	0x33, r24	; 51
		SET(TCCR0,WGM01);
 726:	83 b7       	in	r24, 0x33	; 51
 728:	88 60       	ori	r24, 0x08	; 8
 72a:	83 bf       	out	0x33, r24	; 51
 72c:	06 c0       	rjmp	.+12     	; 0x73a <TIMER0_MODE_INIT+0x46>
		{
			timer_ini_error=TIMER_OK;
		}
		break;
		case MODE_FAST_PWM:
		SET(TCCR0,WGM00);
 72e:	83 b7       	in	r24, 0x33	; 51
 730:	80 64       	ori	r24, 0x40	; 64
 732:	83 bf       	out	0x33, r24	; 51
		SET(TCCR0,WGM01);
 734:	83 b7       	in	r24, 0x33	; 51
 736:	88 60       	ori	r24, 0x08	; 8
 738:	83 bf       	out	0x33, r24	; 51
		{
			timer_ini_error=TIMER_OK;
		}
		break;
	}
	TCNT0 = ini_value;
 73a:	62 bf       	out	0x32, r22	; 50
return timer_ini_error;
}
 73c:	80 e0       	ldi	r24, 0x00	; 0
 73e:	08 95       	ret

00000740 <TIMER0_STOP>:
/* stop TIMER0                                                          */
/************************************************************************/
TIMER_Error_t TIMER0_STOP(void)
{
	TIMER_Error_t timer_stop_error=TIMER_OK;
	TCCR0 = 0x00;
 740:	13 be       	out	0x33, r1	; 51
	if (1)
	{
		timer_stop_error=TIMER_OK;
	}
	return timer_stop_error;
}
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	08 95       	ret

00000746 <TIMERO_PRESCALER_INIT>:
/* TIMER0 Configuration of prescaler                                    */
/************************************************************************/
TIMER_Error_t TIMERO_PRESCALER_INIT(Timer_Preccaler prescaler){

TIMER_Error_t 	timer_pre_error = TIMER_OK;
switch (prescaler)
 746:	82 30       	cpi	r24, 0x02	; 2
 748:	f9 f0       	breq	.+62     	; 0x788 <TIMERO_PRESCALER_INIT+0x42>
 74a:	28 f4       	brcc	.+10     	; 0x756 <TIMERO_PRESCALER_INIT+0x10>
 74c:	88 23       	and	r24, r24
 74e:	41 f0       	breq	.+16     	; 0x760 <TIMERO_PRESCALER_INIT+0x1a>
 750:	81 30       	cpi	r24, 0x01	; 1
 752:	81 f0       	breq	.+32     	; 0x774 <TIMERO_PRESCALER_INIT+0x2e>
 754:	36 c0       	rjmp	.+108    	; 0x7c2 <TIMERO_PRESCALER_INIT+0x7c>
 756:	83 30       	cpi	r24, 0x03	; 3
 758:	09 f1       	breq	.+66     	; 0x79c <TIMERO_PRESCALER_INIT+0x56>
 75a:	84 30       	cpi	r24, 0x04	; 4
 75c:	49 f1       	breq	.+82     	; 0x7b0 <TIMERO_PRESCALER_INIT+0x6a>
 75e:	31 c0       	rjmp	.+98     	; 0x7c2 <TIMERO_PRESCALER_INIT+0x7c>
{
case NO_PRESCALER:
    SET(TCCR0,CS00);
 760:	83 b7       	in	r24, 0x33	; 51
 762:	81 60       	ori	r24, 0x01	; 1
 764:	83 bf       	out	0x33, r24	; 51
	CLEAR(TCCR0,CS01);
 766:	83 b7       	in	r24, 0x33	; 51
 768:	8d 7f       	andi	r24, 0xFD	; 253
 76a:	83 bf       	out	0x33, r24	; 51
	CLEAR(TCCR0,CS02);
 76c:	83 b7       	in	r24, 0x33	; 51
 76e:	8b 7f       	andi	r24, 0xFB	; 251
 770:	83 bf       	out	0x33, r24	; 51
 772:	27 c0       	rjmp	.+78     	; 0x7c2 <TIMERO_PRESCALER_INIT+0x7c>
	{
		timer_pre_error = TIMER_OK;
	}
	break;
	case PRESCALER_8:
	CLEAR(TCCR0,CS00);
 774:	83 b7       	in	r24, 0x33	; 51
 776:	8e 7f       	andi	r24, 0xFE	; 254
 778:	83 bf       	out	0x33, r24	; 51
	SET(TCCR0,CS01);
 77a:	83 b7       	in	r24, 0x33	; 51
 77c:	82 60       	ori	r24, 0x02	; 2
 77e:	83 bf       	out	0x33, r24	; 51
	CLEAR(TCCR0,CS02);
 780:	83 b7       	in	r24, 0x33	; 51
 782:	8b 7f       	andi	r24, 0xFB	; 251
 784:	83 bf       	out	0x33, r24	; 51
 786:	1d c0       	rjmp	.+58     	; 0x7c2 <TIMERO_PRESCALER_INIT+0x7c>
	{
		timer_pre_error = TIMER_OK;
	}
	break;
	case PRESCALER_64:
	SET(TCCR0,CS00);
 788:	83 b7       	in	r24, 0x33	; 51
 78a:	81 60       	ori	r24, 0x01	; 1
 78c:	83 bf       	out	0x33, r24	; 51
	SET(TCCR0,CS01);
 78e:	83 b7       	in	r24, 0x33	; 51
 790:	82 60       	ori	r24, 0x02	; 2
 792:	83 bf       	out	0x33, r24	; 51
	CLEAR(TCCR0,CS02);
 794:	83 b7       	in	r24, 0x33	; 51
 796:	8b 7f       	andi	r24, 0xFB	; 251
 798:	83 bf       	out	0x33, r24	; 51
 79a:	13 c0       	rjmp	.+38     	; 0x7c2 <TIMERO_PRESCALER_INIT+0x7c>
	{
		timer_pre_error = TIMER_OK;
	}
	break;
   case PRESCALER_256:
   CLEAR(TCCR0,CS00);
 79c:	83 b7       	in	r24, 0x33	; 51
 79e:	8e 7f       	andi	r24, 0xFE	; 254
 7a0:	83 bf       	out	0x33, r24	; 51
   CLEAR(TCCR0,CS01);
 7a2:	83 b7       	in	r24, 0x33	; 51
 7a4:	8d 7f       	andi	r24, 0xFD	; 253
 7a6:	83 bf       	out	0x33, r24	; 51
   SET(TCCR0,CS02);
 7a8:	83 b7       	in	r24, 0x33	; 51
 7aa:	84 60       	ori	r24, 0x04	; 4
 7ac:	83 bf       	out	0x33, r24	; 51
 7ae:	09 c0       	rjmp	.+18     	; 0x7c2 <TIMERO_PRESCALER_INIT+0x7c>
	{
		timer_pre_error = TIMER_OK;
	}
	break;
   case PRESCALER_1024:
   SET(TCCR0,CS00);
 7b0:	83 b7       	in	r24, 0x33	; 51
 7b2:	81 60       	ori	r24, 0x01	; 1
 7b4:	83 bf       	out	0x33, r24	; 51
   CLEAR(TCCR0,CS01);
 7b6:	83 b7       	in	r24, 0x33	; 51
 7b8:	8d 7f       	andi	r24, 0xFD	; 253
 7ba:	83 bf       	out	0x33, r24	; 51
   SET(TCCR0,CS02);
 7bc:	83 b7       	in	r24, 0x33	; 51
 7be:	84 60       	ori	r24, 0x04	; 4
 7c0:	83 bf       	out	0x33, r24	; 51
    } 
	  break;
}
return timer_pre_error ;

}
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	08 95       	ret

000007c6 <TIMER0_OV_Interrupt_Enable>:
/************************************************************************/

TIMER_Error_t TIMER0_OV_Interrupt_Enable(void) // ENABLE INTRRUPT
{   
	TIMER_Error_t  timer_ovr_error = TIMER_OK;
	SET(TIMSK,TOIE0);
 7c6:	89 b7       	in	r24, 0x39	; 57
 7c8:	81 60       	ori	r24, 0x01	; 1
 7ca:	89 bf       	out	0x39, r24	; 57
	if (1)
	{
		timer_ovr_error = TIMER_OK;
	}
	return timer_ovr_error ;
}
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	08 95       	ret

000007d0 <TIMER0_Clear_ovf_Flag>:
/*      OVER FLOW Flag clear                                            */
/************************************************************************/
TIMER_Error_t TIMER0_Clear_ovf_Flag(void)
{
	TIMER_Error_t timer_clear_error=TIMER_OK;
	SET(TIFR,TOV0);
 7d0:	88 b7       	in	r24, 0x38	; 56
 7d2:	81 60       	ori	r24, 0x01	; 1
 7d4:	88 bf       	out	0x38, r24	; 56
	if (1)
	{
		timer_clear_error = TIMER_OK;
	}
	return timer_clear_error ;
}
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	08 95       	ret

000007da <TIMER0_OV_SETCALLBACK>:
	if (1)
	{
		timer_oc_call_error=TIMER_OK;
	}
	return timer_oc_call_error;
}
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	08 95       	ret

000007de <main>:
#include "Application/App.h"

int main(void)
{   
	/* Replace with your application code */
    APP_INIT();
 7de:	0e 94 c7 00 	call	0x18e	; 0x18e <APP_INIT>
while(1)
{	
	APP_START();
 7e2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <APP_START>
 7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <main+0x4>

000007e8 <_exit>:
 7e8:	f8 94       	cli

000007ea <__stop_program>:
 7ea:	ff cf       	rjmp	.-2      	; 0x7ea <__stop_program>
